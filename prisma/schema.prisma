generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model ServicesTypes {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  value Float
}

model Service {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  code            String         @unique
  value           Float
  servicesTypes   Json
  createdAt       DateTime       @default(now())
  userId          String         @db.ObjectId
  user            User           @relation(fields: [userId], references: [id])
  paymentMethodId String         @db.ObjectId
  paymentMethod   PaymentMethod  @relation(fields: [paymentMethodId], references: [id])
  transactions    Transactions[]
  customerId      String?        @db.ObjectId
  customer        Customer?      @relation(fields: [customerId], references: [id])
}

model User {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  code String  @unique
  isRoot         Boolean        @default(false)
  active         Boolean        @default(true)
  email          String         @unique
  login          String         @unique
  name           String
  password       String
  /// Could not determine type: the field only had null or empty values in the sample set.
  profileImgLink String?
  services       Service[]
  profileType    String         @default("admin")
  transactions   Transactions[]
}

model BankAccount {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  bankName       String
  agency         String?
  accountNumber  String?
  accountType    String?
  accountOwner   String?
  pyamentMethods PaymentMethod[]
}

model PaymentMethod {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  bankId       String         @db.ObjectId
  bankAccount  BankAccount    @relation(fields: [bankId], references: [id])
  services     Service[]
  transactions Transactions[]
}

model Transactions {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  description     String
  value           Float
  date            DateTime      @default(now())
  serviceId       String?       @db.ObjectId
  service         Service?      @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  paymentMethodId String        @db.ObjectId
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  category        String
  type            String
  userId          String        @db.ObjectId
  user            User          @relation(fields: [userId], references: [id])
}

model Customer {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  code    String    @unique
  name    String
  email   String?
  phone   String
  services Service[] 
}

model Counters {
  id    String @id @map("_id")
  count Int
}
