generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model ServicesTypes {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  value Float
}

model Barbershop {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  openAt       DateTime?
  closeAt      DateTime?
  name         String?
  address      String?
  phone        String?
  email        String?
  description  String?
  services     Service[]
  users        User[]
  bankAccounts BankAccount[]
  scheduling   Scheduling[]
}

model Service {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  code            String         @unique
  value           Float
  servicesValue   Float?
  discount        Float          @default(0)
  servicesTypes   Json
  createdAt       DateTime       @default(now())
  userId          String         @db.ObjectId
  user            User           @relation(fields: [userId], references: [id])
  paymentMethodId String         @db.ObjectId
  paymentMethod   PaymentMethod  @relation(fields: [paymentMethodId], references: [id])
  transactions    Transactions[]
  customerId      String?        @db.ObjectId
  customer        Customer?      @relation(fields: [customerId], references: [id])
  scheduling      Scheduling[]
  barbershopId    String?        @db.ObjectId
  barbershop      Barbershop?    @relation(fields: [barbershopId], references: [id])
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  code           String         @unique
  phone          String?
  notifications  Boolean        @default(false)
  isRoot         Boolean        @default(false)
  active         Boolean        @default(true)
  email          String         @unique
  login          String         @unique
  name           String
  password       String
  /// Could not determine type: the field only had null or empty values in the sample set.
  profileImgLink String?
  services       Service[]
  profileType    String         @default("admin")
  transactions   Transactions[]
  scheduling     Scheduling[]
  barbershopId   String?        @db.ObjectId
  barbershop     Barbershop?    @relation(fields: [barbershopId], references: [id])
}

model BankAccount {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  bankName       String
  initialValue   Float           @default(0)
  agency         String?
  accountNumber  String?
  accountType    String?
  accountOwner   String?
  paymentMethods PaymentMethod[]
  transactions   Transactions[]
  barbershopId   String?         @db.ObjectId
  barbershop     Barbershop?     @relation(fields: [barbershopId], references: [id])
}

model PaymentMethod {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  bankId       String         @db.ObjectId
  bankAccount  BankAccount    @relation(fields: [bankId], references: [id])
  services     Service[]
  transactions Transactions[]
}

enum SchedulingStatus {
  pendente
  atendido
  cancelado
  agendado
}

model Scheduling {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  date          DateTime         @default(now())
  time          String
  description   String?
  userId        String           @db.ObjectId
  user          User             @relation(fields: [userId], references: [id])
  servicesTypes Json?
  serviceId     String?          @db.ObjectId
  service       Service?         @relation(fields: [serviceId], references: [id])
  customerId    String?          @db.ObjectId
  customer      Customer?        @relation(fields: [customerId], references: [id])
  barbershopId  String?          @db.ObjectId
  barbershop    Barbershop?      @relation(fields: [barbershopId], references: [id])
  status        SchedulingStatus @default(agendado)
  wasAttended   Boolean          @default(false)
}

model Transactions {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  description     String
  value           Float
  date            DateTime      @default(now())
  serviceId       String?       @db.ObjectId
  service         Service?      @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  paymentMethodId String        @db.ObjectId
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  category        String
  type            String
  userId          String        @db.ObjectId
  user            User          @relation(fields: [userId], references: [id])
  bankAccountId   String?       @db.ObjectId
  bankAccount     BankAccount?  @relation(fields: [bankAccountId], references: [id])
}

model Customer {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  code       String       @unique
  name       String
  email      String?
  phone      String
  services   Service[]
  scheduling Scheduling[]
}

model Counters {
  id    String @id @map("_id")
  count Int
}
